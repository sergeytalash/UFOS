import unittest
import UFOS_plotter
import os
import datetime

from procedures import calculate_final_files, Correction


def settings():
    settings_dict = {
        'calibration': {'nm(pix)': {'S': ['0', '0.0397', '270.71'], 'Z': ['0', '0.0397', '271.91']},
                        'pix_interval': 51,
                        'points': {'Fraunhofer_pair': [393.37, 396.78], 'cloud_pair_1': [332, 352],
                                   'cloud_pair_2': [340, 360], 'o3_pair_1': [312, 332], 'o3_pair_2': [317, 340]},
                        'polynom': {'degree': 3, 'mu_end': 12, 'mu_intervals': [3, 5], 'mu_start': 1,
                                    'mu_step': 0.05},
                        'sigma_count': 2, 'sko_D': 100, 'sko_ZaD': 100, 'uva_koef': 1, 'uvb_koef': 1,
                        'uve_koef': 1},
        'calibration2': {'kzLarger1': [1.22252, -0.10069, 0.0087], 'kzLess1': [1.1057, 0.0631, -0.0439],
                         'kz_obl1': [-2.9911, 6.3662, -2.3918], 'kzLarger2': [1.30802, -0.13524, 0.01315],
                         'kzLess2': [0.9856, 0.245, -0.09598], 'kz_obl2': [-3.1193, 6.2871, -2.2256], 'pix+-': 2,
                         'mu_effect_1': 2, 'mu_effect_2': 2}, 'channel_names': {'D': 'D', 'S': 'S', 'Z': 'Z'},
        'device': {'accummulate': 1, 'amplitude_max': 2800, 'amplitude_min': 2600, 'auto_expo_max': 4000,
                   'auto_expo_min': 50, 'auto_exposition': 1, 'channel': 'ZS', 'graduation_expo': 4000, 'id': 14,
                   'manual_expo': [50, 100, 150]},
        'station': {'id': '27612', 'interval': 10, 'latitude': 55.45, 'longitude': -37.34, 'sun_height_min': 5,
                    'timezone': '+3'}, 'version': '2.0'}
    return settings_dict


def print_name(*args):
    print(str(args[0]).split()[1])


def get_tests_dir():
    path = os.path.basename(os.getcwd())
    if path == 'UFOS':
        tests_dir = 'tests\\'
    elif path == 'tests':
        tests_dir = ''
    return tests_dir


class TestProcedures(unittest.TestCase):
    def test_get_new_corrects_a_correct_data(self):
        # print('name')
        self.assertEqual(Correction.get_second_corrects([279, 285, 275, 271, 268, 275, 282, 274, 282, 272],
                                                        [279, 285, 275, 271, 268, 275, 282, 274, 282, 272],
                                                        settings()['calibration']['sigma_count']),
                         (['1', '1', '1', '1', '1', '1', '1', '1', '1', '1'], 5.22, 276))

    def test_get_new_corrects_b_uncorrect_data(self):
        self.assertEqual(Correction.get_second_corrects([279, 285, 275, 271, 268, 700, 1500, 274, 2000, 272],
                                                        [279, 285, 275, 271, 268, 275, 282, 274, 282, 272],
                                                        settings()['calibration']['sigma_count']),
                         (['1', '1', '1', '1', '1', '0', '0', '1', '0', '1'], 5.22, 276))

    def test_finalfile_prepare_a_datetime_string(self):
        init = UFOS_plotter.FinalFile(settings(), '.', True, '')
        self.assertEqual(init.prepare('20181203 06:43:55', {'o3_1': 713, 'o3_2': 279, 'correct_1': 0, 'correct_2': 1}),
                         ('20181203 06:43:55', 5.475, {'o3_1': 713, 'o3_2': 279, 'correct_1': 0, 'correct_2': 1}))

    def test_finalfile_prepare_b_datetime_datetime(self):
        init = UFOS_plotter.FinalFile(settings(), '.', True, '')
        self.assertEqual(init.prepare(datetime.datetime.strptime('20181203 06:43:55', '%Y%m%d %H:%M:%S'),
                                      {'o3_1': 713, 'o3_2': 279, 'correct_1': 0, 'correct_2': 1}),
                         ('20181203 06:43:55', 5.475, {'o3_1': 713, 'o3_2': 279, 'correct_1': 0, 'correct_2': 1}))

    def test_finalfile_save_a(self):
        init = UFOS_plotter.FinalFile(settings(), '.', True, '')
        ozone_file = '{}Ufos_14\\Ozone\\2018\\2018-12\\New_m14_Ozone_20181203.txt'.format(get_tests_dir())
        if os.path.exists(ozone_file):
            os.remove(ozone_file)
        self.assertEqual(init.save(settings(), get_tests_dir(), 'ZD',
                                   ['20181203 06:43:55',
                                    '20181203 06:48:37',
                                    '20181203 06:54:19',
                                    '20181203 06:59:00',
                                    '20181203 07:03:44'],
                                   [5.475, 5.857, 6.307, 6.665, 7.018],
                                   [{'o3_1': 713, 'o3_2': 279, 'correct_1': 0, 'correct_2': 1},
                                    {'o3_1': 755, 'o3_2': 285, 'correct_1': 0, 'correct_2': 1},
                                    {'o3_1': 718, 'o3_2': 275, 'correct_1': 0, 'correct_2': 1},
                                    {'o3_1': 731, 'o3_2': 271, 'correct_1': 0, 'correct_2': 1},
                                    {'o3_1': 713, 'o3_2': 268, 'correct_1': 0, 'correct_2': 1}]),
                         ozone_file)
        self.assertEqual(calculate_final_files(settings(),
                                               ozone_file,
                                               'ZD',
                                               True,
                                               'file'), {'1': {'all': {'k': ['0', '0', '0', '0', '0'],
                                                                       'mean': 0,
                                                                       'o3': [713, 755, 718, 731, 713],
                                                                       'o3_count': 5,
                                                                       'sigma': 0,
                                                                       'text': 'Среднее значение ОСО (P1): 0\n'
                                                                               'Стандартное отклонение: 0\n'},
                                                               'evening': {'k': [], 'o3': [], 'o3_count': 0,
                                                                           'text': '\n'},
                                                               'morning': {'k': ['0', '0', '0', '0', '0'],
                                                                           'mean': 0,
                                                                           'o3': [713, 755, 718, 731, 713],
                                                                           'o3_count': 5,
                                                                           'sigma': 0,
                                                                           'text': 'Среднее значение ОСО (P1): 0\n'
                                                                                   'Стандартное отклонение: 0\n'}},
                                                         '2': {'all': {'k': ['0', '0', '0', '0', '0'],
                                                                       'mean': 275,
                                                                       'o3': [279, 285, 275, 271, 268],
                                                                       'o3_count': 5,
                                                                       'sigma': 5.99,
                                                                       'text': 'Среднее значение ОСО (P2): 275\n'
                                                                               'Стандартное отклонение: 5.99\n'},
                                                               'evening': {'k': [], 'o3': [], 'o3_count': 0,
                                                                           'text': '\n'},
                                                               'morning': {'k': ['0', '0', '0', '0', '0'],
                                                                           'mean': 275,
                                                                           'o3': [279, 285, 275, 271, 268],
                                                                           'o3_count': 5,
                                                                           'sigma': 5.99,
                                                                           'text': 'Среднее значение ОСО (P2): 275\n'
                                                                                   'Стандартное отклонение: 5.99\n'}}}
                         )
        data = ['20181203 06:43:55;20181203 09:43:55;5.475;713;0;279;1',
                '20181203 06:48:37;20181203 09:48:37;5.857;755;0;285;1',
                '20181203 06:54:19;20181203 09:54:19;6.307;718;0;275;1',
                '20181203 06:59:00;20181203 09:59:00;6.665;731;0;271;1',
                '20181203 07:03:44;20181203 10:03:44;7.018;713;0;268;1',
                '20181203 07:08:27;20181203 10:08:27;7.358;709;0;275;1',
                '20181203 07:13:07;20181203 10:13:07;7.685;741;0;282;1',
                '20181203 07:17:49;20181203 10:17:49;8.004;745;0;274;1',
                '20181203 07:22:36;20181203 10:22:36;8.317;715;0;282;1',
                '20181203 07:32:25;20181203 10:32:25;8.925;727;0;272;1',
                '20181203 07:37:05;20181203 10:37:05;9.197;714;0;272;1',
                '20181203 07:41:46;20181203 10:41:46;9.459;726;0;274;1',
                '20181203 07:46:26;20181203 10:46:26;9.708;729;0;275;1',
                '20181203 07:51:05;20181203 10:51:05;9.946;728;0;274;1',
                '20181203 07:55:44;20181203 10:55:44;10.172;723;0;269;1',
                '20181203 08:00:23;20181203 11:00:23;10.386;739;0;277;1',
                '20181203 08:05:03;20181203 11:05:03;10.59;739;0;271;1',
                '20181203 08:09:44;20181203 11:09:44;10.782;729;0;275;1',
                '20181203 08:19:05;20181203 11:19:05;11.13;737;0;271;1',
                '20181203 08:23:45;20181203 11:23:45;11.286;735;0;270;1',
                '20181203 08:28:24;20181203 11:28:24;11.429;734;0;268;1',
                '20181203 08:33:03;20181203 11:33:03;11.56;733;0;271;1',
                '20181203 08:37:43;20181203 11:37:43;11.679;729;0;273;1',
                '20181203 08:42:22;20181203 11:42:22;11.785;732;0;271;1',
                '20181203 08:51:20;20181203 11:51:20;11.955;740;0;272;1',
                '20181203 08:56:00;20181203 11:56:00;12.025;743;0;273;1',
                '20181203 09:00:39;20181203 12:00:39;12.082;732;0;266;1',
                '20181203 09:05:19;20181203 12:05:19;12.127;733;0;267;1',
                '20181203 09:10:00;20181203 12:10:00;12.16;725;0;277;1',
                '20181203 09:14:39;20181203 12:14:39;12.179;735;0;271;1',
                '20181203 09:19:18;20181203 12:19:18;12.186;747;0;272;1',
                '20181203 09:23:57;20181203 12:23:57;12.181;735;0;268;1',
                '20181203 09:28:36;20181203 12:28:36;12.163;724;0;272;1',
                '20181203 09:33:14;20181203 12:33:14;12.132;734;0;271;1',
                '20181203 09:37:54;20181203 12:37:54;12.089;735;0;271;1',
                '20181203 09:42:32;20181203 12:42:32;12.033;732;0;274;1',
                '20181203 09:47:11;20181203 12:47:11;11.965;743;0;273;1',
                '20181203 09:51:52;20181203 12:51:52;11.884;740;0;273;1',
                '20181203 10:01:52;20181203 13:01:52;11.668;725;0;272;1',
                '20181203 10:11:54;20181203 13:11:54;11.394;735;0;272;1',
                '20181203 10:16:33;20181203 13:16:33;11.248;744;0;269;1',
                '20181203 10:21:12;20181203 13:21:12;11.09;732;0;271;1',
                '20181203 10:25:52;20181203 13:25:52;10.92;732;0;278;1',
                '20181203 10:30:33;20181203 13:30:33;10.736;734;0;273;1',
                '20181203 10:35:14;20181203 13:35:14;10.541;721;0;276;1',
                '20181203 10:45:14;20181203 13:45:14;10.084;732;0;275;1',
                '20181203 10:49:53;20181203 13:49:53;9.854;727;0;277;1',
                '20181203 10:54:33;20181203 13:54:33;9.611;717;0;276;1',
                '20181203 10:59:15;20181203 13:59:15;9.355;717;0;280;1',
                '20181203 11:03:55;20181203 14:03:55;9.09;720;0;276;1',
                '20181203 11:08:34;20181203 14:08:34;8.814;724;0;274;1',
                '20181203 11:13:14;20181203 14:13:14;8.527;716;0;271;1',
                '20181203 11:23:14;20181203 14:23:14;7.875;722;0;274;1',
                '20181203 11:27:55;20181203 14:27:55;7.554;726;0;277;1',
                '20181203 11:32:35;20181203 14:32:35;7.222;707;0;273;1',
                '20181203 11:37:15;20181203 14:37:15;6.881;716;0;270;1',
                '20181203 11:41:55;20181203 14:41:55;6.53;716;0;270;1',
                '20181203 11:46:38;20181203 14:46:38;6.165;713;0;259;1',
                '20181203 11:51:20;20181203 14:51:20;5.791;721;0;270;1',
                '20181203 11:56:02;20181203 14:56:02;5.408;728;0;273;1',
                '20181203 12:00:43;20181203 15:00:43;5.016;759;0;285;1']
        out = calculate_final_files(settings(),
                                    data,
                                    'ZD',
                                    False,
                                    'calculate')

        self.assertEqual(list(out.keys()), ["1", "2"])
        # self.assertEqual(out.items(), ["1", "2"])

    def test_finalfile_save_b_file_is_correct(self):
        with open('{}Ufos_14\\Ozone\\2018\\2018-12\\New_m14_Ozone_20181203.txt'.format(get_tests_dir())) as fr:
            d = fr.readlines()
            self.assertEqual(d[0],
                             'DatetimeUTC;DatetimeLocal;Sunheight[°];OzoneP1[D.u.];CorrectP1;OzoneP2[D.u.];CorrectP2\n')
            self.assertEqual(d[1], '20181203 06:43:55;20181203 09:43:55;5.5;713;0;279;1\n')
            self.assertEqual(d[2], '20181203 06:48:37;20181203 09:48:37;5.9;755;0;285;1\n')
            self.assertEqual(d[3], '20181203 06:54:19;20181203 09:54:19;6.3;718;0;275;1\n')
            self.assertEqual(d[4], '20181203 06:59:00;20181203 09:59:00;6.7;731;0;271;1\n')


class TestPlotter(unittest.TestCase):
    def test_1(self):
        # print('name')
        self.assertEqual(1, 1)


if __name__ == '__main__':
    unittest.main()
